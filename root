{"version":1,"ops":[{"type":1,"author":{"id":"027a2bcb19402705046b570711cd98e591403e96"},"timestamp":1350642395,"metadata":{"github-id":"MDU6SXNzdWU3NzExNjUx","github-url":"https://github.com/dlidstrom/Snittlistan/issues/134","origin":"github"},"title":"Paging av säsonger och medlemmar och matchresultat","message":"Använd följande metod:\n\n```\npublic static MvcHtmlString PageLinks(\n    this HtmlHelper html,\n    PagingInfo pagingInfo,\n    Func\u003cint, string\u003e pageUrl,\n    int pagingLinks = 9)\n{\n    var builder = new StringBuilder();\n\n    var startPageNumber = StartPageNumber(pagingInfo, pagingLinks);\n\n    // add previous buttons, one for far-left, one for next left\n    if (pagingInfo.CurrentPage \u003e startPageNumber)\n    {\n        var listItemFarLeft = CreatePageListItem(\"\u0026larr;\", pageUrl.Invoke(1), string.Empty);\n        builder.Append(listItemFarLeft);\n        var item = CreatePageListItem(\n            \"\u0026laquo;\",\n            pageUrl.Invoke(pagingInfo.CurrentPage - 1),\n            string.Empty);\n        builder.Append(item);\n    }\n    else\n    {\n        builder.Append(CreatePageListItem(\"\u0026larr;\", \"javascript:;\", \"disabled\"));\n        builder.Append(CreatePageListItem(\"\u0026laquo;\", \"javascript:;\", \"disabled\"));\n    }\n\n    for (var i = 1; i \u003c= Math.Min(pagingLinks, pagingInfo.TotalPages); i++, startPageNumber++)\n    {\n        TagBuilder li;\n        if (startPageNumber == pagingInfo.CurrentPage)\n        {\n            li = CreatePageListItem(\n                startPageNumber.ToString(CultureInfo.InvariantCulture),\n                \"javascript:;\",\n                \"active\");\n        }\n        else\n        {\n            li = CreatePageListItem(\n                startPageNumber.ToString(CultureInfo.InvariantCulture),\n                pageUrl.Invoke(startPageNumber),\n                string.Empty);\n        }\n\n        builder.Append(li);\n    }\n\n    // add next buttons, one for far-right, one for next right\n    if (pagingInfo.CurrentPage \u003c pagingInfo.TotalPages)\n    {\n        var item = CreatePageListItem(\n            \"\u0026raquo;\",\n            pageUrl.Invoke(pagingInfo.CurrentPage + 1),\n            string.Empty);\n        builder.Append(item);\n        var listItemFarRight = CreatePageListItem(\"\u0026rarr;\", pageUrl.Invoke(pagingInfo.TotalPages), string.Empty);\n        builder.Append(listItemFarRight);\n    }\n    else\n    {\n        builder.Append(CreatePageListItem(\"\u0026raquo;\", \"javascript:;\", \"disabled\"));\n        builder.Append(CreatePageListItem(\"\u0026rarr;\", \"javascript:;\", \"disabled\"));\n    }\n\n    var ul = new TagBuilder(\"ul\") { InnerHtml = builder.ToString() };\n\n    return MvcHtmlString.Create(ul.ToString());\n}\n\npublic static int StartPageNumber(PagingInfo pagingInfo, int pagingLinks)\n{\n    // compute left-most page number\n    var middleOfPagingLinks = (pagingLinks / 2) + (pagingLinks % 2);\n    var leftmostPageNumber = pagingInfo.CurrentPage - middleOfPagingLinks + 1;\n    if (pagingInfo.CurrentPage \u003c= middleOfPagingLinks)\n    {\n        leftmostPageNumber = 1;\n    }\n    else if (pagingInfo.CurrentPage \u003e pagingInfo.TotalPages - middleOfPagingLinks)\n    {\n        leftmostPageNumber = pagingInfo.TotalPages - pagingLinks + 1;\n    }\n\n    return leftmostPageNumber;\n}\n\nprivate static TagBuilder CreatePageListItem(string innerHtml, string anchor, string className)\n{\n    var li = new TagBuilder(\"li\");\n    if (!string.IsNullOrWhiteSpace(className))\n        li.MergeAttribute(\"class\", className);\n    var a = new TagBuilder(\"a\");\n    a.MergeAttribute(\"href\", anchor);\n    a.InnerHtml = innerHtml;\n    li.InnerHtml = a.ToString();\n    return li;\n}\n```","files":null}]}