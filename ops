{"version":1,"ops":[{"type":3,"author":{"id":"027a2bcb19402705046b570711cd98e591403e96"},"timestamp":1552554632,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ3Mjc2NDQwMw==","github-url":"https://github.com/dlidstrom/Snittlistan/issues/430#issuecomment-472764403"},"message":"S책 h채r:\n\n```csharp\nvoid Write(TextWriter writer, string desc)\n{\n    var escaped = desc.Replace(\"\\n\", TextLineFeed);\n    writer.WriteLine(escaped.Substring(0, Math.Min(escaped.Length, 74)));\n    while (escaped.Length \u003e 74)\n    {\n        escaped = escaped.Substring(74);\n        writer.WriteLine(\" \" + escaped.Substring(0, Math.Min(escaped.Length, 74)));\n    }\n}\n```","files":null},{"type":4,"author":{"id":"027a2bcb19402705046b570711cd98e591403e96"},"timestamp":1552592866,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MjIwNDYxMDQ2NA=="},"status":2},{"type":3,"author":{"id":"027a2bcb19402705046b570711cd98e591403e96"},"timestamp":1552652154,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ3MzI2MzczMQ==","github-url":"https://github.com/dlidstrom/Snittlistan/issues/430#issuecomment-473263731"},"message":"S책 h채r:\n\n```csharp\nvoid Main()\n{\n    var str = @\"line 1\n    line 2\n    \n    \n    line3\";\n\n    var desc = string.Join(Environment.NewLine, Enumerable.Range(0, 4).Select(x =\u003e str));\n    FoldLines(Escape(desc)).Dump();\n}\n\nconst string TextLineFeed = @\"\\\" + \"n\";\n\n// Define other methods and classes here\nstring Escape(string value)\n{\n    if (string.IsNullOrWhiteSpace(value))\n    {\n        return value;\n    }\n\n    value = value.Replace(SerializationConstants.LineBreak, @\"\\n\");\n    value = value.Replace(\"\\r\", @\"\\n\");\n    value = value.Replace(\"\\n\", @\"\\n\");\n    value = value.Replace(\";\", @\"\\;\");\n    value = value.Replace(\",\", @\"\\,\");\n    return value;\n}\n\npublic static string FoldLines(string incoming)\n{\n    //The spec says nothing about trimming, but it seems reasonable...\n    var trimmed = incoming.Trim();\n    if (trimmed.Length \u003c= 75)\n    {\n        return trimmed + SerializationConstants.LineBreak;\n    }\n\n    const int takeLimit = 74;\n\n    var firstLine = trimmed.Substring(0, takeLimit);\n    var remainder = trimmed.Substring(takeLimit, trimmed.Length - takeLimit);\n\n    var chunkedRemainder = string.Join(SerializationConstants.LineBreak + \" \", Chunk(remainder));\n    return firstLine + SerializationConstants.LineBreak + \" \" + chunkedRemainder + SerializationConstants.LineBreak;\n}\n\npublic static IEnumerable\u003cstring\u003e Chunk(string str, int chunkSize = 73)\n{\n    for (var index = 0; index \u003c str.Length; index += chunkSize)\n    {\n        yield return str.Substring(index, Math.Min(chunkSize, str.Length - index));\n    }\n}\n\npublic class SerializationConstants\n{\n    public const string LineBreak = \"\\r\\n\";\n}\n```","files":null},{"type":4,"author":{"id":"027a2bcb19402705046b570711cd98e591403e96"},"timestamp":1552652154,"metadata":{"github-id":"MDEzOlJlb3BlbmVkRXZlbnQyMjA2Mjc4Mzc3"},"status":1},{"type":4,"author":{"id":"027a2bcb19402705046b570711cd98e591403e96"},"timestamp":1552668262,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MjIwNzAyNTIxNw=="},"status":2}]}