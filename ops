{"version":1,"ops":[{"type":1,"author":{"id":"027a2bcb19402705046b570711cd98e591403e96"},"timestamp":1372756969,"metadata":{"github-id":"MDU6SXNzdWUxNjI1NTE5Mg==","github-url":"https://github.com/dlidstrom/Snittlistan/issues/218","origin":"github"},"title":"Team of week","message":"``` csharp\npublic class TeamViewModelTest\n{\n    [Fact]\n    public void GroupsByTurn()\n    {\n        // Arrange\n        var player1 = new Player(\"Daniel\", \"e@d.com\", false) { Id = \"9876\" };\n        var player2 = new Player(\"Tomas\", \"s@d.com\", false) { Id = \"8765\" };\n        var teamOfWeek1 = new TeamOfWeek(1234, 2012, 10);\n        teamOfWeek1.AddResultForPlayer(player1, 210);\n        teamOfWeek1.AddResultForPlayer(player2, 190);\n        var teamOfWeek2 = new TeamOfWeek(5432, 2012, 10);\n        teamOfWeek2.AddResultForPlayer(player1, 220);\n        teamOfWeek2.AddResultForPlayer(player2, 180);\n\n        // Act\n        var vm = new TeamOfWeekViewModel(2012, new List\u003cTeamOfWeek\u003e\n        {\n            teamOfWeek1,\n            teamOfWeek2\n        });\n\n        // Assert\n        var weeks = vm.Weeks;\n        Assert.Equal(1, weeks.Count);\n        var week = weeks[0];\n        Assert.Equal(10, week.Turn);\n        var players = week.Players;\n        Assert.Equal(2, players.Count);\n        var playerScore1 = players[0];\n        Assert.Equal(\"Daniel\", playerScore1.Name);\n        Assert.Equal(220, playerScore1.Pins);\n        var playerScore2 = players[1];\n        Assert.Equal(\"Tomas\", playerScore2.Name);\n        Assert.Equal(190, playerScore2.Pins);\n    }\n}\n```\n\n``` csharp\npublic class TeamOfWeekViewModel\n{\n    public TeamOfWeekViewModel(int season, IEnumerable\u003cTeamOfWeek\u003e teamOfWeek)\n    {\n        Season = season;\n        Weeks = new List\u003cWeek\u003e();\n        foreach (var turn in teamOfWeek.GroupBy(x =\u003e x.Turn))\n        {\n            var q = from t in turn\n                    from playerScore in t.PlayerScores\n                    group playerScore by new { playerScore.Key, playerScore.Value.Name } into g\n                    select new TeamOfWeek.PlayerScore(g.Key.Name)\n                    {\n                        Pins = g.OrderByDescending(x =\u003e x.Value.Pins)\n                            .First()\n                            .Value.Pins\n                    };\n            var week = new Week(turn.Key, q.ToList());\n            Weeks.Add(week);\n        }\n    }\n\n    public int Season { get; private set; }\n\n    public List\u003cWeek\u003e Weeks { get; private set; }\n\n    public class Week\n    {\n        public Week(int turn, List\u003cTeamOfWeek.PlayerScore\u003e playerScores)\n        {\n            Turn = turn;\n            Players = playerScores;\n        }\n\n        public int Turn { get; private set; }\n\n        public List\u003cTeamOfWeek.PlayerScore\u003e Players { get; private set; }\n    }\n}\n```","files":null}]}