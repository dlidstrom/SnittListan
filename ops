{"version":1,"ops":[{"type":1,"author":{"id":"027a2bcb19402705046b570711cd98e591403e96"},"timestamp":1416820093,"metadata":{"github-id":"MDU6SXNzdWU0OTg2ODQ5Nw==","github-url":"https://github.com/dlidstrom/Snittlistan/issues/282","origin":"github"},"title":"Fixa background tasks","message":"``` patch\nDate: Mon, 24 Nov 2014 10:06:47 +0100\nSubject: [PATCH] Fixed background tasks runner\n\n---\n .../Infrastructure/BackgroundTasks/TaskRunner.cs   | 67 +++++++++++++++-------\n ...tartableInstaller.cs =\u003e TaskRunnerInstaller.cs} |  7 ++-\n Snittlistan.Web/Snittlistan.Web.csproj             |  2 +-\n 3 files changed, 52 insertions(+), 24 deletions(-)\n rename Snittlistan.Web/Infrastructure/Installers/{StartableInstaller.cs =\u003e TaskRunnerInstaller.cs} (54%)\n\ndiff --git a/Snittlistan.Web/Infrastructure/BackgroundTasks/TaskRunner.cs b/Snittlistan.Web/Infrastructure/BackgroundTasks/TaskRunner.cs\nindex 87ae91e..1d8aae6 100644\n--- a/Snittlistan.Web/Infrastructure/BackgroundTasks/TaskRunner.cs\n+++ b/Snittlistan.Web/Infrastructure/BackgroundTasks/TaskRunner.cs\n@@ -3,8 +3,9 @@ using System.ComponentModel.Composition.Hosting;\n using System.Linq;\n using System.Threading;\n using System.Timers;\n-using Castle.Core;\n+using System.Web.Hosting;\n using Castle.MicroKernel;\n+using Elmah;\n using NLog;\n using Raven.Client;\n using Raven.Client.Indexes;\n@@ -14,13 +15,14 @@ using Timer = System.Timers.Timer;\n\n namespace Snittlistan.Web.Infrastructure.BackgroundTasks\n {\n-    public class TaskRunner : IStartable\n+    public class TaskRunner : IRegisteredObject\n     {\n         private static readonly Logger Log = LogManager.GetCurrentClassLogger();\n         private readonly IKernel kernel;\n         private readonly IDocumentStore documentStore;\n         private readonly Timer timer;\n-        private int counter;\n+        private object locker = new object();\n+        private AutoResetEvent resetEvent = new AutoResetEvent(false);\n\n         public TaskRunner(IKernel kernel, IDocumentStore documentStore)\n         {\n@@ -29,26 +31,46 @@ namespace Snittlistan.Web.Infrastructure.BackgroundTasks\n\n             var typeCatalog = new TypeCatalog(new[] { typeof(BackgroundTasksIndex) });\n             IndexCreation.CreateIndexes(new CompositionContainer(typeCatalog), documentStore);\n-            timer = new Timer();\n-        }\n-\n-        public void Start()\n-        {\n-            timer.Interval = 1000;\n+            timer = new Timer\n+            {\n+                Interval = 1000\n+            };\n             timer.Elapsed += TimerOnElapsed;\n             timer.Start();\n+\n+            HostingEnvironment.RegisterObject(this);\n         }\n\n-        public void Stop()\n+        public void Stop(bool immediate)\n         {\n-            timer.Stop();\n+            try\n+            {\n+                timer.Stop();\n+                resetEvent.WaitOne(10000);\n+            }\n+            catch\n+            {\n+            }\n+\n+            HostingEnvironment.UnregisterObject(this);\n         }\n\n         private void TimerOnElapsed(object sender, ElapsedEventArgs elapsedEventArgs)\n         {\n-            if (Interlocked.CompareExchange(ref counter, 1, 0) != 0) return;\n-            PerformWork();\n-            counter--;\n+            if (Monitor.IsEntered(locker)) return;\n+\n+            lock (locker)\n+            {\n+                try\n+                {\n+                    resetEvent = new AutoResetEvent(false);\n+                    PerformWork();\n+                    resetEvent.Set();\n+                }\n+                catch\n+                {\n+                }\n+            }\n         }\n\n         private void PerformWork()\n@@ -57,24 +79,27 @@ namespace Snittlistan.Web.Infrastructure.BackgroundTasks\n             {\n                 using (var session = documentStore.OpenSession())\n                 {\n-                    ProcessTask(session);\n-                    session.SaveChanges();\n+                    var shouldSave = ProcessTask(session);\n+                    if (shouldSave)\n+                    {\n+                        session.SaveChanges();\n+                    }\n                 }\n             }\n             catch (Exception e)\n             {\n                 Log.ErrorException(e.GetType().ToString(), e);\n-                Elmah.ErrorSignal.FromCurrentContext().Raise(e);\n+                ErrorLog.GetDefault(null).Log(new Error(e));\n             }\n         }\n\n-        private void ProcessTask(IDocumentSession session)\n+        private bool ProcessTask(IDocumentSession session)\n         {\n             var task = session.Query\u003cBackgroundTask, BackgroundTasksIndex\u003e()\n                               .Where(x =\u003e x.IsFinished == false \u0026\u0026 x.IsFailed == false)\n                               .OrderBy(x =\u003e x.NextTry)\n                               .FirstOrDefault();\n-            if (task == null) return;\n+            if (task == null) return false;\n\n             object handler = null;\n             try\n@@ -88,13 +113,15 @@ namespace Snittlistan.Web.Infrastructure.BackgroundTasks\n             catch (Exception e)\n             {\n                 Log.ErrorException(e.GetType().ToString(), e);\n-                Elmah.ErrorSignal.FromCurrentContext().Raise(e);\n+                ErrorLog.GetDefault(null).Log(new Error(e));\n                 task.UpdateNextTry(e);\n             }\n             finally\n             {\n                 if (handler != null) kernel.ReleaseComponent(handler);\n             }\n+\n+            return true;\n         }\n     }\n }\n\\ No newline at end of file\ndiff --git a/Snittlistan.Web/Infrastructure/Installers/StartableInstaller.cs b/Snittlistan.Web/Infrastructure/Installers/TaskRunnerInstaller.cs\nsimilarity index 54%\nrename from Snittlistan.Web/Infrastructure/Installers/StartableInstaller.cs\nrename to Snittlistan.Web/Infrastructure/Installers/TaskRunnerInstaller.cs\nindex 23e9366..78b548a 100644\n--- a/Snittlistan.Web/Infrastructure/Installers/StartableInstaller.cs\n+++ b/Snittlistan.Web/Infrastructure/Installers/TaskRunnerInstaller.cs\n@@ -1,15 +1,16 @@\n-﻿using Castle.Core;\n+﻿using Castle.Facilities.Startable;\n using Castle.MicroKernel.Registration;\n using Castle.MicroKernel.SubSystems.Configuration;\n using Castle.Windsor;\n+using Snittlistan.Web.Infrastructure.BackgroundTasks;\n\n namespace Snittlistan.Web.Infrastructure.Installers\n {\n-    public class StartableInstaller : IWindsorInstaller\n+    public class TaskRunnerInstaller : IWindsorInstaller\n     {\n         public void Install(IWindsorContainer container, IConfigurationStore store)\n         {\n-            container.Register(Classes.FromThisAssembly().BasedOn\u003cIStartable\u003e().LifestyleSingleton());\n+            container.Register(Component.For\u003cTaskRunner\u003e().LifestyleSingleton().Start());\n         }\n     }\n }\n\\ No newline at end of file\ndiff --git a/Snittlistan.Web/Snittlistan.Web.csproj b/Snittlistan.Web/Snittlistan.Web.csproj\nindex 1aea4f4..cc7360e 100644\n--- a/Snittlistan.Web/Snittlistan.Web.csproj\n+++ b/Snittlistan.Web/Snittlistan.Web.csproj\n@@ -286,7 +286,7 @@\n     \u003cCompile Include=\"Infrastructure\\Installers\\EventMigratorInstaller.cs\" /\u003e\n     \u003cCompile Include=\"Infrastructure\\Installers\\EventStoreSessionInstaller.cs\" /\u003e\n     \u003cCompile Include=\"Infrastructure\\Installers\\BitsClientInstaller.cs\" /\u003e\n-    \u003cCompile Include=\"Infrastructure\\Installers\\StartableInstaller.cs\" /\u003e\n+    \u003cCompile Include=\"Infrastructure\\Installers\\TaskRunnerInstaller.cs\" /\u003e\n     \u003cCompile Include=\"Infrastructure\\IQuery.cs\" /\u003e\n     \u003cCompile Include=\"Infrastructure\\JetBrains\\Annotations.cs\" /\u003e\n     \u003cCompile Include=\"Models\\Emails.cs\" /\u003e\n-- \n1.8.3.msysgit.0\n\n```","files":null}]}