{"version":1,"ops":[{"type":1,"author":{"id":"027a2bcb19402705046b570711cd98e591403e96"},"timestamp":1321624008,"metadata":{"github-id":"MDU6SXNzdWUyMjgwMTY0","github-url":"https://github.com/dlidstrom/Snittlistan/issues/92","origin":"github"},"title":"Senaste 20 serierna","message":"Fr√•n Ryan Heath:\n\n```\nusing System;\nusing System.Linq;\nusing Raven.Client.Embedded;\nusing Raven.Client.Indexes;\nusing Raven.Client.Linq;\n\nnamespace ConsoleApplication\n{\n    class Program\n    {\n        class PlayerPins\n        {\n            public string Player { get; set; }\n            public DateTime Date { get; set; }\n            public int Pins { get; set; }\n        }\n\n        class Pins_ByMatchDate : AbstractIndexCreationTask\u003cPlayerPins, Pins_ByMatchDate.Result\u003e\n        {\n            public Pins_ByMatchDate()\n            {\n                Map = pins =\u003e from pin in pins\n                              select new\n                                 {\n                                     pin.Player,\n                                     pin.Date,\n                                     pin.Pins\n                                 };\n\n                Reduce = maps =\u003e from map in maps\n                                 group map by map.Player into grouped\n                                 select new\n                                 {\n                                     Player = grouped.Key,\n                                     grouped.OrderByDescending(x =\u003e x.Date).Take(3).First().Date,\n                                     Pins = grouped.OrderByDescending(x =\u003e x.Date).Take(3).Average(x =\u003e x.Pins),\n                                 };\n            }\n\n            public class Result\n            {\n                public string Player { get; set; }\n                public DateTime Date { get; set; }\n                public double Pins { get; set; }\n            }\n        }\n\n        static void Main()\n        {\n            var playerPins = new[]\n                                 {\n                                     new PlayerPins {Player = \"John\", Date = new DateTime(2011, 10, 11), Pins = 200},\n                                     new PlayerPins {Player = \"John\", Date = new DateTime(2011, 11, 11), Pins = 250},\n                                     new PlayerPins {Player = \"John\", Date = new DateTime(2011, 11, 12), Pins = 240},\n                                     new PlayerPins {Player = \"John\", Date = new DateTime(2011, 11, 13), Pins = 260},\n                                     new PlayerPins {Player = \"John\", Date = new DateTime(2011, 11, 14), Pins = 270},\n                                     new PlayerPins {Player = \"Pete\", Date = new DateTime(2010, 11, 11), Pins = 300},\n                                     new PlayerPins {Player = \"Pete\", Date = new DateTime(2011, 11, 11), Pins = 300},\n                                     new PlayerPins {Player = \"Pete\", Date = new DateTime(2011, 11, 12), Pins = 300},\n                                     new PlayerPins {Player = \"Pete\", Date = new DateTime(2011, 11, 13), Pins = 300},\n                                     new PlayerPins {Player = \"Kara\", Date = new DateTime(2011, 10, 11), Pins = 100},\n                                     new PlayerPins {Player = \"Kara\", Date = new DateTime(2011, 10, 12), Pins = 200},\n                                     new PlayerPins {Player = \"Kara\", Date = new DateTime(2011, 10, 13), Pins = 300}\n                                 };\n\n\n            using (var store = new EmbeddableDocumentStore { RunInMemory = true })\n            {\n                store.Initialize();\n\n                IndexCreation.CreateIndexes(typeof(Pins_ByMatchDate).Assembly, store);\n\n                using (var session = store.OpenSession())\n                {\n                    foreach(var playerPin in playerPins)\n                    {\n                        session.Store(playerPin);\n                    }\n\n                    session.SaveChanges();\n                }\n\n                using (var session = store.OpenSession())\n                {\n                    var lastAveragePins = session.Query\u003cPins_ByMatchDate.Result, Pins_ByMatchDate\u003e()\n                        .AsProjection\u003cPins_ByMatchDate.Result\u003e()\n                        .Customize(x =\u003e x.WaitForNonStaleResults());\n\n                    foreach (var pins in lastAveragePins)\n                    {\n                        Console.WriteLine(\"{0} {1:yyyy/MM/dd} {2}\", pins.Player, pins.Date, pins.Pins);\n                    }\n\n                    // expect to see\n                    // John 2011-11-14 256.666666666667\n                    // Pete 2011-11-13 300\n                    // Kara 2011-10-13 200\n                }\n            }\n        }\n    }\n}\n```","files":null}]}